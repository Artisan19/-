<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\TEST.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\TEST.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Mon Dec 23 22:07:44 2019
<BR><P>
<H3>Maximum Stack Usage =       2544 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; qr_decode &rArr; atk_qr_decode &rArr; zbar_scan_image &rArr; _zbar_qr_decode &rArr; qr_reader_match_centers &rArr;  qr_reader_match_centers (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a0]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">NMI_Handler</a><BR>
 <LI><a href="#[a]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">HardFault_Handler</a><BR>
 <LI><a href="#[b]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">MemManage_Handler</a><BR>
 <LI><a href="#[c]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">BusFault_Handler</a><BR>
 <LI><a href="#[d]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">UsageFault_Handler</a><BR>
 <LI><a href="#[e]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">SVC_Handler</a><BR>
 <LI><a href="#[f]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">DebugMon_Handler</a><BR>
 <LI><a href="#[10]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">PendSV_Handler</a><BR>
 <LI><a href="#[11]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">SysTick_Handler</a><BR>
 <LI><a href="#[24]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC_IRQHandler</a><BR>
 <LI><a href="#[110]">_zbar_symbol_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fa]">zbar_symbol_set_ref</a><BR>
 <LI><a href="#[102]">_zbar_image_scanner_recycle_syms</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[102]">_zbar_image_scanner_recycle_syms</a><BR>
 <LI><a href="#[1a3]">zbar_decoder_set_config</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a3]">zbar_decoder_set_config</a><BR>
 <LI><a href="#[b9]">LCD_Fill</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b9]">LCD_Fill</a><BR>
 <LI><a href="#[10b]">qr_reader_match_centers</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10b]">qr_reader_match_centers</a><BR>
 <LI><a href="#[191]">rs_quartic_solve</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[191]">rs_quartic_solve</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c]">BusFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[26]">CAN1_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[27]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[28]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[25]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">CAN2_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[61]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[60]">DCMI_IRQHandler</a> from dcmi.o(i.DCMI_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[41]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream1_IRQHandler</a> from dcmi.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[f]">DebugMon_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4f]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[50]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[18]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3a]">EXTI15_10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[19]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1a]">EXTI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1b]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1c]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[29]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[63]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[42]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[62]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a]">HardFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[32]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[31]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[34]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[33]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5a]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b]">MemManage_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9]">NMI_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3c]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5c]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[13]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[10]">PendSV_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[17]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3b]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[15]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[43]">SDIO_IRQHandler</a> from sdio_sdcard.o(i.SDIO_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[35]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[36]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[45]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[11]">SysTick_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[14]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2a]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2d]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2c]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2b]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2e]">TIM2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2f]">TIM3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[30]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[44]">TIM5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[48]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[49]">TIM7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3d]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[40]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3f]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3e]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[46]">UART4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[47]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[37]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[38]">USART2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[39]">USART3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d]">UsageFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[12]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6e]">__main</a> from __main.o(!!!main) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[65]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[66]">fputc</a> from usart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[6c]">my_mem_init</a> from malloc.o(i.my_mem_init) referenced from malloc.o(.data)
 <LI><a href="#[6d]">my_mem_perused</a> from malloc.o(i.my_mem_perused) referenced from malloc.o(.data)
 <LI><a href="#[69]">qr_cmp_edge_pt</a> from qrdec.o(i.qr_cmp_edge_pt) referenced from qrdec.o(i.qr_finder_edge_pts_aff_classify)
 <LI><a href="#[69]">qr_cmp_edge_pt</a> from qrdec.o(i.qr_cmp_edge_pt) referenced from qrdec.o(i.qr_finder_edge_pts_hom_classify)
 <LI><a href="#[68]">qr_dcmi_rx_callback</a> from test.o(i.qr_dcmi_rx_callback) referenced from test.o(i.main)
 <LI><a href="#[6a]">qr_finder_center_cmp</a> from qrdec.o(i.qr_finder_center_cmp) referenced from qrdec.o(i.qr_finder_find_crossings)
 <LI><a href="#[6b]">symbol_handler</a> from img_scanner.o(i.symbol_handler) referenced from img_scanner.o(i.zbar_image_scanner_create)
 <LI><a href="#[67]">zbar_image_free_data</a> from image.o(i.zbar_image_free_data) referenced from atk_zbar.o(i.atk_qr_decode)
 <LI><a href="#[67]">zbar_image_free_data</a> from image.o(i.zbar_image_free_data) referenced from image.o(i.zbar_image_free_data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[71]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1b3]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1b4]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[72]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1b5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[73]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8f]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[75]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[77]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1b6]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[7e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[79]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1be]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1c9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1ca]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[83]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1cb]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1cc]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1cd]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1ce]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1cf]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1d0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1d1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[70]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1d2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1d3]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[7f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2544 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; qr_decode &rArr; atk_qr_decode &rArr; zbar_scan_image &rArr; _zbar_qr_decode &rArr; qr_reader_match_centers &rArr;  qr_reader_match_centers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1d4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a1]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[82]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1d5]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[84]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1d6]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__aeabi_lasr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_cell_init
</UL>

<P><STRONG><a name="[1d7]"></a>_ll_sshift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[86]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[88]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_decode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[74]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[8b]"></a>_printf_longlong_hex</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[76]"></a>_printf_int_hex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[8c]"></a>_printf_hex_ptr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_hex_int_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[8d]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[90]"></a>qsort</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, qsortnoex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_find_crossings
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_edge_pts_hom_classify
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_edge_pts_aff_classify
</UL>

<P><STRONG><a name="[135]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_sym
</UL>

<P><STRONG><a name="[11d]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_decode
</UL>

<P><STRONG><a name="[da]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_decode
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str_Mid
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_count_utf8
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_count_gbk
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postprocess
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i25_decode_end
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postprocess
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code39_postprocess
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[92]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1d8]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postprocess_c
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_modified_berlekamp_massey
</UL>

<P><STRONG><a name="[94]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1d9]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_poly_zero
</UL>

<P><STRONG><a name="[97]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1da]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_decode
</UL>

<P><STRONG><a name="[1db]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[1de]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[99]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[9a]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[9c]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[78]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[89]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1df]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[96]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[1e4]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1e8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1e9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[7c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[81]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a2]"></a>BEEP_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, beep.o(i.BEEP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BEEP_Init &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>CmdResp1Error</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, sdio_sdcard.o(i.CmdResp1Error))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[a4]"></a>DCMI_DMA_Init</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, dcmi.o(i.DCMI_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DCMI_DMA_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>DCMI_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, dcmi.o(i.DCMI_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>DCMI_Init</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, dcmi.o(i.DCMI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DCMI_Init &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AF_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>DCMI_Start</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dcmi.o(i.DCMI_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DCMI_Start &rArr; LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dcmi.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Stream1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>FSMC_SRAM_Init</STRONG> (Thumb, 596 bytes, Stack size 16 bytes, sram.o(i.FSMC_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FSMC_SRAM_Init &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AF_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>GPIO_AF_Set</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, sys.o(i.GPIO_AF_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_AF_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[a3]"></a>GPIO_Set</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, sys.o(i.GPIO_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[ac]"></a>Get_HzMat</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, text.o(i.Get_HzMat))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Get_HzMat &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
</UL>

<P><STRONG><a name="[ae]"></a>KEY_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KEY_Init &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>KEY_Scan</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, key.o(i.KEY_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEY_Scan &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>LCD_Clear</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ili93xx.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>LCD_Color_Fill</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ili93xx.o(i.LCD_Color_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_Color_Fill &rArr; LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>LCD_Display_Dir</STRONG> (Thumb, 444 bytes, Stack size 8 bytes, ili93xx.o(i.LCD_Display_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_Display_Dir &rArr; LCD_Scan_Dir &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[b5]"></a>LCD_Fast_DrawPoint</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, ili93xx.o(i.LCD_Fast_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
</UL>

<P><STRONG><a name="[b9]"></a>LCD_Fill</STRONG> (Thumb, 180 bytes, Stack size 44 bytes, ili93xx.o(i.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = LCD_Fill &rArr;  LCD_Fill (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_decode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>LCD_Init</STRONG> (Thumb, 14634 bytes, Stack size 16 bytes, ili93xx.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LCD_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AF_Set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>LCD_RD_DATA</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ili93xx.o(i.LCD_RD_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_RD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[bb]"></a>LCD_ReadReg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ili93xx.o(i.LCD_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_ReadReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[be]"></a>LCD_SSD_BackLightSet</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ili93xx.o(i.LCD_SSD_BackLightSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_SSD_BackLightSet &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[b4]"></a>LCD_Scan_Dir</STRONG> (Thumb, 744 bytes, Stack size 20 bytes, ili93xx.o(i.LCD_Scan_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_Scan_Dir &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
</UL>

<P><STRONG><a name="[a9]"></a>LCD_SetCursor</STRONG> (Thumb, 418 bytes, Stack size 12 bytes, ili93xx.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Start
</UL>

<P><STRONG><a name="[c2]"></a>LCD_ShowChar</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, ili93xx.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>

<P><STRONG><a name="[c3]"></a>LCD_ShowString</STRONG> (Thumb, 102 bytes, Stack size 36 bytes, ili93xx.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>LCD_WR_DATA</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ili93xx.o(i.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[b6]"></a>LCD_WR_REG</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ili93xx.o(i.LCD_WR_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[aa]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ili93xx.o(i.LCD_WriteRAM_Prepare))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Start
</UL>

<P><STRONG><a name="[b8]"></a>LCD_WriteReg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ili93xx.o(i.LCD_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[c4]"></a>LED_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LED_Init &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>MY_NVIC_Init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, sys.o(i.MY_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DMA_Init
</UL>

<P><STRONG><a name="[c5]"></a>MY_NVIC_PriorityGroupConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sys.o(i.MY_NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>

<P><STRONG><a name="[dd]"></a>MY_NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(i.MY_NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[c6]"></a>OV2640_Init</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, ov2640.o(i.OV2640_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = OV2640_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>OV2640_OutSize_Set</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ov2640.o(i.OV2640_OutSize_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OV2640_OutSize_Set &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>OV2640_RGB565_Mode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ov2640.o(i.OV2640_RGB565_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OV2640_RGB565_Mode &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>OV2640_Special_Effects</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ov2640.o(i.OV2640_Special_Effects))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OV2640_Special_Effects &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>SCCB_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sccb.o(i.SCCB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCCB_Init &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>

<P><STRONG><a name="[cd]"></a>SCCB_No_Ack</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sccb.o(i.SCCB_No_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCCB_No_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[ce]"></a>SCCB_RD_Byte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sccb.o(i.SCCB_RD_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCCB_RD_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[c9]"></a>SCCB_RD_Reg</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sccb.o(i.SCCB_RD_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCCB_RD_Reg &rArr; SCCB_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Byte
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Byte
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_No_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>

<P><STRONG><a name="[cf]"></a>SCCB_Start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sccb.o(i.SCCB_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCCB_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[d1]"></a>SCCB_Stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sccb.o(i.SCCB_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCCB_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[d0]"></a>SCCB_WR_Byte</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, sccb.o(i.SCCB_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCCB_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[c8]"></a>SCCB_WR_Reg</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sccb.o(i.SCCB_WR_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCCB_WR_Reg &rArr; SCCB_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Byte
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Special_Effects
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_RGB565_Mode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_OutSize_Set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>

<P><STRONG><a name="[43]"></a>SDIO_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, sdio_sdcard.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc &rArr; SDIO_Send_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>SDIO_Send_Cmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SDIO_Send_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_Send_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[d2]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 346 bytes, Stack size 4 bytes, sdio_sdcard.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SD_ProcessIRQSrc &rArr; SDIO_Send_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Cmd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>SPI1_Init</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, spi.o(i.SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI1_Init &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AF_Set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[d6]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, spi.o(i.SPI1_ReadWriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[df]"></a>SPI1_SetSpeed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, spi.o(i.SPI1_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[d7]"></a>Show_Font</STRONG> (Thumb, 190 bytes, Stack size 128 bytes, text.o(i.Show_Font))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Show_Font &rArr; Get_HzMat &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HzMat
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>

<P><STRONG><a name="[d8]"></a>Show_Str</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, text.o(i.Show_Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Show_Str &rArr; Show_Font &rArr; Get_HzMat &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str_Mid
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_decode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>Show_Str_Mid</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, text.o(i.Show_Str_Mid))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Show_Str_Mid &rArr; Show_Str &rArr; Show_Font &rArr; Get_HzMat &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>Stm32_Clock_Init</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, sys.o(i.Stm32_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Stm32_Clock_Init &rArr; Sys_Clock_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Clock_Set
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>Sys_Clock_Set</STRONG> (Thumb, 254 bytes, Stack size 20 bytes, sys.o(i.Sys_Clock_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Sys_Clock_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[37]"></a>USART1_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, usart.o(i.USART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>W25QXX_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, w25qxx.o(i.W25QXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = W25QXX_Init &rArr; SPI1_Init &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>W25QXX_Read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HzMat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>

<P><STRONG><a name="[e0]"></a>W25QXX_ReadID</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = W25QXX_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[8e]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[85]"></a>_sys_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[e1]"></a>_zbar_decode_code128</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, code128.o(i._zbar_decode_code128))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _zbar_decode_code128 &rArr; postprocess &rArr; postprocess_c &rArr; size_buf &rArr; atk_qr_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_buf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postprocess
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_width
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode6
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>

<P><STRONG><a name="[e6]"></a>_zbar_decode_code39</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, code39.o(i._zbar_decode_code39))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _zbar_decode_code39 &rArr; atk_qr_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_realloc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_width
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code39_postprocess
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code39_decode9
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>

<P><STRONG><a name="[eb]"></a>_zbar_decode_ean</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ean.o(i._zbar_decode_ean))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _zbar_decode_ean &rArr; decode_pass &rArr; ean_part_end7
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postprocess
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integrate_partial
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_width
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_pass
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>

<P><STRONG><a name="[f0]"></a>_zbar_decode_i25</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, i25.o(i._zbar_decode_i25))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _zbar_decode_i25 &rArr; atk_qr_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_realloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i25_decode_start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i25_decode_end
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i25_decode10
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>

<P><STRONG><a name="[172]"></a>_zbar_decoder_get_qr_finder_line</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qr_finder.o(i._zbar_decoder_get_qr_finder_line))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_handler
</UL>

<P><STRONG><a name="[f5]"></a>_zbar_find_qr</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, qr_finder.o(i._zbar_find_qr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _zbar_find_qr &rArr; pair_width
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pair_width
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_width
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_e
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>

<P><STRONG><a name="[f9]"></a>_zbar_image_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, image.o(i._zbar_image_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _zbar_image_free &rArr; zbar_symbol_set_ref &rArr; _zbar_symbol_set_free &rArr; _zbar_symbol_refcnt &rArr; _zbar_symbol_free &rArr;  zbar_symbol_set_ref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_symbol_set_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_destroy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_refcnt
</UL>

<P><STRONG><a name="[fd]"></a>_zbar_image_scanner_add_sym</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, img_scanner.o(i._zbar_image_scanner_add_sym))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _zbar_image_scanner_add_sym &rArr; cache_sym &rArr; _zbar_image_scanner_recycle_syms &rArr;  _zbar_image_scanner_recycle_syms (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_sym
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[ff]"></a>_zbar_image_scanner_alloc_sym</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, img_scanner.o(i._zbar_image_scanner_alloc_sym))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _zbar_image_scanner_alloc_sym &rArr; atk_qr_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_sym
</UL>

<P><STRONG><a name="[102]"></a>_zbar_image_scanner_recycle_syms</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, img_scanner.o(i._zbar_image_scanner_recycle_syms))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = _zbar_image_scanner_recycle_syms &rArr;  _zbar_image_scanner_recycle_syms (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_set_free
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_recycle_syms
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_recycle_syms
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recycle_syms
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_sym
</UL>

<P><STRONG><a name="[104]"></a>_zbar_qr_create</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, qrdec.o(i._zbar_qr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _zbar_qr_create &rArr; isaac_init &rArr; atk_qr_memcpy &rArr; mymemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gf256_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
</UL>

<P><STRONG><a name="[107]"></a>_zbar_qr_decode</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, qrdec.o(i._zbar_qr_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352<LI>Call Chain = _zbar_qr_decode &rArr; qr_reader_match_centers &rArr;  qr_reader_match_centers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memcpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_binarize
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_list_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_list_clear
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_centers_locate
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
</UL>

<P><STRONG><a name="[10e]"></a>_zbar_qr_destroy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, qrdec.o(i._zbar_qr_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _zbar_qr_destroy &rArr; atk_qr_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
</UL>

<P><STRONG><a name="[10f]"></a>_zbar_qr_found_line</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, qrdec.o(i._zbar_qr_found_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _zbar_qr_found_line &rArr; atk_qr_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_realloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_handler
</UL>

<P><STRONG><a name="[1ab]"></a>_zbar_qr_reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, qrdec.o(i._zbar_qr_reset))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
</UL>

<P><STRONG><a name="[1a5]"></a>_zbar_refcnt_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, refcnt.o(i._zbar_refcnt_init))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_create
</UL>

<P><STRONG><a name="[110]"></a>_zbar_symbol_free</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, symbol.o(i._zbar_symbol_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = _zbar_symbol_free &rArr;  zbar_symbol_set_ref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_symbol_set_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_refcnt
</UL>

<P><STRONG><a name="[112]"></a>_zbar_symbol_set_create</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, symbol.o(i._zbar_symbol_set_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _zbar_symbol_set_create &rArr; atk_qr_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
</UL>

<P><STRONG><a name="[103]"></a>_zbar_symbol_set_free</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, symbol.o(i._zbar_symbol_set_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _zbar_symbol_set_free &rArr; _zbar_symbol_refcnt &rArr; _zbar_symbol_free &rArr;  zbar_symbol_set_ref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_refcnt
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_recycle_image
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_recycle_syms
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_symbol_set_ref
</UL>

<P><STRONG><a name="[113]"></a>atk_guess_utf8</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, atk_zbar.o(i.atk_guess_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atk_guess_utf8 &rArr; atk_qr_count_utf8 &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_count_utf8
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_count_gbk
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_decode
</UL>

<P><STRONG><a name="[116]"></a>atk_qr_convert</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, atk_qrdecode.o(i.atk_qr_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = atk_qr_convert &rArr; ff_convert &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_decode
</UL>

<P><STRONG><a name="[114]"></a>atk_qr_count_gbk</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, atk_zbar.o(i.atk_qr_count_gbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atk_qr_count_gbk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_guess_utf8
</UL>

<P><STRONG><a name="[115]"></a>atk_qr_count_utf8</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, atk_zbar.o(i.atk_qr_count_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = atk_qr_count_utf8 &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_guess_utf8
</UL>

<P><STRONG><a name="[118]"></a>atk_qr_decode</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, atk_zbar.o(i.atk_qr_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2464<LI>Call Chain = atk_qr_decode &rArr; zbar_scan_image &rArr; _zbar_qr_decode &rArr; qr_reader_match_centers &rArr;  qr_reader_match_centers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_set_size
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_set_data
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_utf8tounicode
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_guess_utf8
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_convert
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_decode
</UL>

<P><STRONG><a name="[11f]"></a>atk_qr_destroy</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, atk_zbar.o(i.atk_qr_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atk_qr_destroy &rArr; zbar_image_scanner_destroy &rArr; _zbar_symbol_set_free &rArr; _zbar_symbol_refcnt &rArr; _zbar_symbol_free &rArr;  zbar_symbol_set_ref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_free
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>atk_qr_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, atk_qrdecode.o(i.atk_qr_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atk_qr_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_destroy
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_decode
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_free_data
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_free
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_destroy
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_destroy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_set_free
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_free
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_destroy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_recycle_syms
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_alloc_sym
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_binarize
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_list_clear
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_pair
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_edge
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_find_crossings
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_cluster_lines
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_centers_locate
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_clear
</UL>

<P><STRONG><a name="[122]"></a>atk_qr_init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, atk_zbar.o(i.atk_qr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atk_qr_init &rArr; atk_qr_destroy &rArr; zbar_image_scanner_destroy &rArr; _zbar_symbol_set_free &rArr; _zbar_symbol_refcnt &rArr; _zbar_symbol_free &rArr;  zbar_symbol_set_ref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_destroy
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_set_format
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_set_config
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_create
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>atk_qr_malloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, atk_qrdecode.o(i.atk_qr_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = atk_qr_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_decode
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_create
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_create
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_create
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_set_create
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_create
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_alloc_sym
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_binarize
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_pair
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_edge
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_find_crossings
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_cluster_lines
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_centers_locate
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_parse
</UL>

<P><STRONG><a name="[10c]"></a>atk_qr_memcpy</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, atk_qrdecode.o(i.atk_qr_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = atk_qr_memcpy &rArr; mymemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_free_data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_found_line
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_sym
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_modified_berlekamp_massey
</UL>

<P><STRONG><a name="[101]"></a>atk_qr_memset</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, atk_qrdecode.o(i.atk_qr_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = atk_qr_memset &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_decode
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_create
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_reset
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_reset
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_new_scan
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postprocess
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_create
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_set_create
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_create
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_alloc_sym
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i25_decode_end
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postprocess
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code39_postprocess
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_find_crossings
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_cluster_lines
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_data_mask_fill
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_alignment_pattern_search
</UL>

<P><STRONG><a name="[ea]"></a>atk_qr_realloc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, atk_qrdecode.o(i.atk_qr_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = atk_qr_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_i25
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code39
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_buf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_found_line
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sym_add_point
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_parse
</UL>

<P><STRONG><a name="[11e]"></a>atk_qr_utf8tounicode</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, atk_zbar.o(i.atk_qr_utf8tounicode))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_decode
</UL>

<P><STRONG><a name="[132]"></a>bch15_5_correct</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, bch15_5.o(i.bch15_5_correct))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bch15_5_correct &rArr; bch15_5_calc_epos &rArr; bch15_5_calc_omega
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_encode
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_calc_syndrome
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_calc_epos
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_fmt_info_decode
</UL>

<P><STRONG><a name="[134]"></a>bch15_5_encode</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, bch15_5.o(i.bch15_5_encode))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_correct
</UL>

<P><STRONG><a name="[145]"></a>delay_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(i.delay_init))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>delay_ms</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_decode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>delay_us</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Byte
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Byte
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_No_Ack
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[13b]"></a>delay_xms</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(i.delay_xms))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[117]"></a>ff_convert</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, mycc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ff_convert &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_convert
</UL>

<P><STRONG><a name="[13c]"></a>font_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fontupd.o(i.font_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = font_init &rArr; W25QXX_Init &rArr; SPI1_Init &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>isaac_init</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, isaac.o(i.isaac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = isaac_init &rArr; atk_qr_memcpy &rArr; mymemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memcpy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_update
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_create
</UL>

<P><STRONG><a name="[143]"></a>isaac_next_uint</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, isaac.o(i.isaac_next_uint))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = isaac_next_uint &rArr; isaac_next_uint32 &rArr; isaac_update
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_next_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_ransac
</UL>

<P><STRONG><a name="[144]"></a>isaac_next_uint32</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isaac.o(i.isaac_next_uint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = isaac_next_uint32 &rArr; isaac_update
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_next_uint
</UL>

<P><STRONG><a name="[80]"></a>main</STRONG> (Thumb, 832 bytes, Stack size 16 bytes, test.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2544 + Unknown Stack Size
<LI>Call Chain = main &rArr; qr_decode &rArr; atk_qr_decode &rArr; zbar_scan_image &rArr; _zbar_qr_decode &rArr; qr_reader_match_centers &rArr;  qr_reader_match_centers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_perused
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_destroy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str_Mid
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Special_Effects
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_RGB565_Mode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_OutSize_Set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Start
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DMA_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_decode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[148]"></a>my_mem_free</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, malloc.o(i.my_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>

<P><STRONG><a name="[6c]"></a>my_mem_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, malloc.o(i.my_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = my_mem_init &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[149]"></a>my_mem_malloc</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, malloc.o(i.my_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
</UL>

<P><STRONG><a name="[6d]"></a>my_mem_perused</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, malloc.o(i.my_mem_perused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_mem_perused
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[121]"></a>myfree</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, malloc.o(i.myfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_decode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
</UL>

<P><STRONG><a name="[127]"></a>mymalloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, malloc.o(i.mymalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_decode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
</UL>

<P><STRONG><a name="[128]"></a>mymemcpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, malloc.o(i.mymemcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mymemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memcpy
</UL>

<P><STRONG><a name="[129]"></a>mymemset</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, malloc.o(i.mymemset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_decode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
</UL>

<P><STRONG><a name="[12a]"></a>myrealloc</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, malloc.o(i.myrealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcpy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_realloc
</UL>

<P><STRONG><a name="[109]"></a>qr_binarize</STRONG> (Thumb, 552 bytes, Stack size 56 bytes, binarize.o(i.qr_binarize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = qr_binarize &rArr; atk_qr_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
</UL>

<P><STRONG><a name="[10d]"></a>qr_code_data_list_clear</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, qrdec.o(i.qr_code_data_list_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = qr_code_data_list_clear &rArr; qr_code_data_clear &rArr; atk_qr_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
</UL>

<P><STRONG><a name="[10a]"></a>qr_code_data_list_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, qrdec.o(i.qr_code_data_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
</UL>

<P><STRONG><a name="[68]"></a>qr_dcmi_rx_callback</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, test.o(i.qr_dcmi_rx_callback))
<BR>[Address Reference Count : 1]<UL><LI> test.o(i.main)
</UL>
<P><STRONG><a name="[147]"></a>qr_decode</STRONG> (Thumb, 418 bytes, Stack size 64 bytes, test.o(i.qr_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528 + Unknown Stack Size
<LI>Call Chain = qr_decode &rArr; atk_qr_decode &rArr; zbar_scan_image &rArr; _zbar_qr_decode &rArr; qr_reader_match_centers &rArr;  qr_reader_match_centers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_decode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[180]"></a>qr_ihypot</STRONG> (Thumb, 176 bytes, Stack size 20 bytes, util.o(i.qr_ihypot))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = qr_ihypot
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_ilog
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit
</UL>

<P><STRONG><a name="[151]"></a>qr_ilog</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, util.o(i.qr_ilog))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_ihypot
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_try_configuration
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_points
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_cell_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_aff_line_step
</UL>

<P><STRONG><a name="[16f]"></a>qr_isqrt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, util.o(i.qr_isqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qr_isqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_ransac
</UL>

<P><STRONG><a name="[10b]"></a>qr_reader_match_centers</STRONG> (Thumb, 530 bytes, Stack size 168 bytes, qrdec.o(i.qr_reader_match_centers))
<BR><BR>[Stack]<UL><LI>Max Depth = 2280 + In Cycle
<LI>Call Chain = qr_reader_match_centers &rArr;  qr_reader_match_centers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_realloc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memcpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_try_configuration
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_point_ccw
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
</UL>

<P><STRONG><a name="[160]"></a>rs_correct</STRONG> (Thumb, 400 bytes, Stack size 1096 bytes, rs.o(i.rs_correct))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = rs_correct &rArr; rs_modified_berlekamp_massey &rArr; atk_qr_memcpy &rArr; mymemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_modified_berlekamp_massey
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_hgmul
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gdiv
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_find_roots
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
</UL>

<P><STRONG><a name="[106]"></a>rs_gf256_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rs.o(i.rs_gf256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rs_gf256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_create
</UL>

<P><STRONG><a name="[146]"></a>uart_init</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_init &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AF_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14d]"></a>zbar_decode_width</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, decoder.o(i.zbar_decode_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = zbar_decode_width &rArr; _zbar_decode_code128 &rArr; postprocess &rArr; postprocess_c &rArr; size_buf &rArr; atk_qr_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_i25
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_ean
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code39
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_find_qr
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code128
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_edge
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_flush
</UL>

<P><STRONG><a name="[19b]"></a>zbar_decoder_create</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, decoder.o(i.zbar_decoder_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = zbar_decoder_create &rArr; atk_qr_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
</UL>

<P><STRONG><a name="[19d]"></a>zbar_decoder_destroy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, decoder.o(i.zbar_decoder_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = zbar_decoder_destroy &rArr; atk_qr_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
</UL>

<P><STRONG><a name="[198]"></a>zbar_decoder_get_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, decoder.o(i.zbar_decoder_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[199]"></a>zbar_decoder_get_data_length</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, decoder.o(i.zbar_decoder_get_data_length))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[197]"></a>zbar_decoder_get_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, decoder.o(i.zbar_decoder_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[196]"></a>zbar_decoder_get_userdata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, decoder.o(i.zbar_decoder_get_userdata))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[19e]"></a>zbar_decoder_new_scan</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, decoder.o(i.zbar_decoder_new_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = zbar_decoder_new_scan &rArr; atk_qr_memset &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i25_reset
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ean_new_scan
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code39_reset
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code128_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_new_scan
</UL>

<P><STRONG><a name="[19c]"></a>zbar_decoder_reset</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, decoder.o(i.zbar_decoder_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = zbar_decoder_reset &rArr; atk_qr_memset &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i25_reset
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ean_new_scan
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code39_reset
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code128_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_reset
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_create
</UL>

<P><STRONG><a name="[1a3]"></a>zbar_decoder_set_config</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, decoder.o(i.zbar_decoder_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = zbar_decoder_set_config &rArr;  zbar_decoder_set_config (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_set_config_bool
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_set_config
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_set_config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_set_config
</UL>

<P><STRONG><a name="[1a8]"></a>zbar_decoder_set_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, decoder.o(i.zbar_decoder_set_handler))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
</UL>

<P><STRONG><a name="[1a7]"></a>zbar_decoder_set_userdata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, decoder.o(i.zbar_decoder_set_userdata))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
</UL>

<P><STRONG><a name="[123]"></a>zbar_image_create</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, image.o(i.zbar_image_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = zbar_image_create &rArr; _zbar_image_refcnt &rArr; _zbar_image_free &rArr; zbar_symbol_set_ref &rArr; _zbar_symbol_set_free &rArr; _zbar_symbol_refcnt &rArr; _zbar_symbol_free &rArr;  zbar_symbol_set_ref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_refcnt_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_refcnt
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_free_data
</UL>

<P><STRONG><a name="[67]"></a>zbar_image_free_data</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, image.o(i.zbar_image_free_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = zbar_image_free_data &rArr; zbar_image_create &rArr; _zbar_image_refcnt &rArr; _zbar_image_free &rArr; zbar_symbol_set_ref &rArr; _zbar_symbol_set_free &rArr; _zbar_symbol_refcnt &rArr; _zbar_symbol_free &rArr;  zbar_symbol_set_ref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_create
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memcpy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_set_data
</UL>
<BR>[Address Reference Count : 2]<UL><LI> atk_zbar.o(i.atk_qr_decode)
<LI> image.o(i.zbar_image_free_data)
</UL>
<P><STRONG><a name="[125]"></a>zbar_image_scanner_create</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, img_scanner.o(i.zbar_image_scanner_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = zbar_image_scanner_create &rArr; _zbar_qr_create &rArr; isaac_init &rArr; atk_qr_memcpy &rArr; mymemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_set_config
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_create
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_set_userdata
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_set_handler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_create
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_create
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_init
</UL>

<P><STRONG><a name="[120]"></a>zbar_image_scanner_destroy</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, img_scanner.o(i.zbar_image_scanner_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = zbar_image_scanner_destroy &rArr; _zbar_symbol_set_free &rArr; _zbar_symbol_refcnt &rArr; _zbar_symbol_free &rArr;  zbar_symbol_set_ref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_destroy
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_destroy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_set_free
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_free
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_destroy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_symbol_set_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_destroy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
</UL>

<P><STRONG><a name="[1aa]"></a>zbar_image_scanner_recycle_image</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, img_scanner.o(i.zbar_image_scanner_recycle_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = zbar_image_scanner_recycle_image &rArr; recycle_syms &rArr; _zbar_image_scanner_recycle_syms &rArr;  _zbar_image_scanner_recycle_syms (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_set_free
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recycle_syms
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
</UL>

<P><STRONG><a name="[126]"></a>zbar_image_scanner_set_config</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, img_scanner.o(i.zbar_image_scanner_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = zbar_image_scanner_set_config &rArr; zbar_decoder_set_config &rArr;  zbar_decoder_set_config (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_set_config
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
</UL>

<P><STRONG><a name="[11a]"></a>zbar_image_set_data</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, image.o(i.zbar_image_set_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = zbar_image_set_data &rArr; zbar_image_free_data &rArr; zbar_image_create &rArr; _zbar_image_refcnt &rArr; _zbar_image_free &rArr; zbar_symbol_set_ref &rArr; _zbar_symbol_set_free &rArr; _zbar_symbol_refcnt &rArr; _zbar_symbol_free &rArr;  zbar_symbol_set_ref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_free_data
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_decode
</UL>

<P><STRONG><a name="[124]"></a>zbar_image_set_format</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, image.o(i.zbar_image_set_format))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_init
</UL>

<P><STRONG><a name="[119]"></a>zbar_image_set_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, image.o(i.zbar_image_set_size))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_decode
</UL>

<P><STRONG><a name="[11b]"></a>zbar_scan_image</STRONG> (Thumb, 650 bytes, Stack size 48 bytes, img_scanner.o(i.zbar_scan_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400<LI>Call Chain = zbar_scan_image &rArr; _zbar_qr_decode &rArr; qr_reader_match_centers &rArr;  qr_reader_match_centers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memcpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_new_scan
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_y
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_set_create
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_reset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_recycle_image
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_recycle_syms
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quiet_border
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_symbol_set_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_decode
</UL>

<P><STRONG><a name="[1ac]"></a>zbar_scan_y</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, scanner.o(i.zbar_scan_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = zbar_scan_y &rArr; process_edge &rArr; zbar_decode_width &rArr; _zbar_decode_code128 &rArr; postprocess &rArr; postprocess_c &rArr; size_buf &rArr; atk_qr_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_edge
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_thresh
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
</UL>

<P><STRONG><a name="[1a6]"></a>zbar_scanner_create</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, scanner.o(i.zbar_scanner_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = zbar_scanner_create &rArr; zbar_scanner_reset &rArr; zbar_decoder_reset &rArr; atk_qr_memset &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
</UL>

<P><STRONG><a name="[1a9]"></a>zbar_scanner_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanner.o(i.zbar_scanner_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = zbar_scanner_destroy &rArr; atk_qr_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
</UL>

<P><STRONG><a name="[187]"></a>zbar_scanner_flush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, scanner.o(i.zbar_scanner_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = zbar_scanner_flush &rArr; process_edge &rArr; zbar_decode_width &rArr; _zbar_decode_code128 &rArr; postprocess &rArr; postprocess_c &rArr; size_buf &rArr; atk_qr_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_edge
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_new_scan
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quiet_border
</UL>

<P><STRONG><a name="[173]"></a>zbar_scanner_get_edge</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, scanner.o(i.zbar_scanner_get_edge))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_handler
</UL>

<P><STRONG><a name="[19a]"></a>zbar_scanner_get_width</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanner.o(i.zbar_scanner_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[188]"></a>zbar_scanner_new_scan</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, scanner.o(i.zbar_scanner_new_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = zbar_scanner_new_scan &rArr; zbar_scanner_flush &rArr; process_edge &rArr; zbar_decode_width &rArr; _zbar_decode_code128 &rArr; postprocess &rArr; postprocess_c &rArr; size_buf &rArr; atk_qr_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_reset
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_new_scan
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quiet_border
</UL>

<P><STRONG><a name="[1ae]"></a>zbar_scanner_reset</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, scanner.o(i.zbar_scanner_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = zbar_scanner_reset &rArr; zbar_decoder_reset &rArr; atk_qr_memset &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_new_scan
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_create
</UL>

<P><STRONG><a name="[fa]"></a>zbar_symbol_set_ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, symbol.o(i.zbar_symbol_set_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = zbar_symbol_set_ref &rArr; _zbar_symbol_set_free &rArr; _zbar_symbol_refcnt &rArr; _zbar_symbol_free &rArr;  zbar_symbol_set_ref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_set_free
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_free
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_free
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[1af]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[1ea]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[c0]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[1b1]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1b0]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
</UL>

<P><STRONG><a name="[1b2]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[7a]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1eb]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1ec]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[fc]"></a>_zbar_image_refcnt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, image.o(i._zbar_image_refcnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _zbar_image_refcnt &rArr; _zbar_image_free &rArr; zbar_symbol_set_ref &rArr; _zbar_symbol_set_free &rArr; _zbar_symbol_refcnt &rArr; _zbar_symbol_free &rArr;  zbar_symbol_set_ref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_free
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_create
</UL>

<P><STRONG><a name="[fe]"></a>cache_sym</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, img_scanner.o(i.cache_sym))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cache_sym &rArr; _zbar_image_scanner_recycle_syms &rArr;  _zbar_image_scanner_recycle_syms (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memcpy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_recycle_syms
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_alloc_sym
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_add_sym
</UL>

<P><STRONG><a name="[171]"></a>qr_handler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, img_scanner.o(i.qr_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = qr_handler &rArr; _zbar_qr_found_line &rArr; atk_qr_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_get_edge
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_found_line
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decoder_get_qr_finder_line
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[186]"></a>quiet_border</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, img_scanner.o(i.quiet_border))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = quiet_border &rArr; zbar_scanner_new_scan &rArr; zbar_scanner_flush &rArr; process_edge &rArr; zbar_decode_width &rArr; _zbar_decode_code128 &rArr; postprocess &rArr; postprocess_c &rArr; size_buf &rArr; atk_qr_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_new_scan
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
</UL>

<P><STRONG><a name="[189]"></a>recycle_syms</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, img_scanner.o(i.recycle_syms))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = recycle_syms &rArr; _zbar_image_scanner_recycle_syms &rArr;  _zbar_image_scanner_recycle_syms (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_recycle_syms
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_recycle_image
</UL>

<P><STRONG><a name="[195]"></a>sym_add_point</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, img_scanner.o(i.sym_add_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sym_add_point &rArr; atk_qr_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[6b]"></a>symbol_handler</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, img_scanner.o(i.symbol_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = symbol_handler &rArr; _zbar_image_scanner_add_sym &rArr; cache_sym &rArr; _zbar_image_scanner_recycle_syms &rArr;  _zbar_image_scanner_recycle_syms (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memcpy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_get_width
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_get_edge
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_get_userdata
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_get_type
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_get_data_length
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_get_data
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_alloc_sym
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_add_sym
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sym_add_point
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_handler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> img_scanner.o(i.zbar_image_scanner_create)
</UL>
<P><STRONG><a name="[e3]"></a>decode6</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, code128.o(i.decode6))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = decode6 &rArr; decode_hi
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_width
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_hi
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_e
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code128
</UL>

<P><STRONG><a name="[138]"></a>decode_e</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, code128.o(i.decode_e))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode6
</UL>

<P><STRONG><a name="[139]"></a>decode_hi</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, code128.o(i.decode_hi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = decode_hi
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode6
</UL>

<P><STRONG><a name="[e2]"></a>get_width</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, code128.o(i.get_width))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code128
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode6
</UL>

<P><STRONG><a name="[e5]"></a>postprocess</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, code128.o(i.postprocess))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = postprocess &rArr; postprocess_c &rArr; size_buf &rArr; atk_qr_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postprocess_c
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code128
</UL>

<P><STRONG><a name="[14a]"></a>postprocess_c</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, code128.o(i.postprocess_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = postprocess_c &rArr; size_buf &rArr; atk_qr_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_buf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postprocess
</UL>

<P><STRONG><a name="[e4]"></a>size_buf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, code128.o(i.size_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = size_buf &rArr; atk_qr_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code128
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postprocess_c
</UL>

<P><STRONG><a name="[f8]"></a>decode_e</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, qr_finder.o(i.decode_e))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_find_qr
</UL>

<P><STRONG><a name="[f6]"></a>get_width</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, qr_finder.o(i.get_width))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_find_qr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pair_width
</UL>

<P><STRONG><a name="[f7]"></a>pair_width</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, qr_finder.o(i.pair_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pair_width
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_find_qr
</UL>

<P><STRONG><a name="[1a2]"></a>code128_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, decoder.o(i.code128_reset))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_reset
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_new_scan
</UL>

<P><STRONG><a name="[1a1]"></a>code39_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, decoder.o(i.code39_reset))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_reset
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_new_scan
</UL>

<P><STRONG><a name="[1a4]"></a>decoder_set_config_bool</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, decoder.o(i.decoder_set_config_bool))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = decoder_set_config_bool
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_set_config
</UL>

<P><STRONG><a name="[19f]"></a>ean_new_scan</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, decoder.o(i.ean_new_scan))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_reset
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_new_scan
</UL>

<P><STRONG><a name="[1a0]"></a>i25_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, decoder.o(i.i25_reset))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_reset
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_new_scan
</UL>

<P><STRONG><a name="[1ad]"></a>calc_thresh</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, scanner.o(i.calc_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calc_thresh
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_y
</UL>

<P><STRONG><a name="[14c]"></a>process_edge</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, scanner.o(i.process_edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = process_edge &rArr; zbar_decode_width &rArr; _zbar_decode_code128 &rArr; postprocess &rArr; postprocess_c &rArr; size_buf &rArr; atk_qr_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_flush
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_y
</UL>

<P><STRONG><a name="[111]"></a>_zbar_symbol_refcnt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, symbol.o(i._zbar_symbol_refcnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _zbar_symbol_refcnt &rArr; _zbar_symbol_free &rArr;  zbar_symbol_set_ref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_free
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_set_free
</UL>

<P><STRONG><a name="[14e]"></a>qr_aff_init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, qrdec.o(i.qr_aff_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = qr_aff_init &rArr; qr_point_ccw
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_point_ccw
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_try_configuration
</UL>

<P><STRONG><a name="[150]"></a>qr_aff_line_step</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, qrdec.o(i.qr_aff_line_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = qr_aff_line_step
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_ilog
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[17d]"></a>qr_aff_project</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, qrdec.o(i.qr_aff_project))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = qr_aff_project
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_pair
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[165]"></a>qr_aff_unproject</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, qrdec.o(i.qr_aff_unproject))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qr_aff_unproject
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_try_configuration
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_ransac
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_edge_pts_aff_classify
</UL>

<P><STRONG><a name="[152]"></a>qr_alignment_pattern_fetch</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, qrdec.o(i.qr_alignment_pattern_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = qr_alignment_pattern_fetch &rArr; qr_img_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_img_get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_alignment_pattern_search
</UL>

<P><STRONG><a name="[154]"></a>qr_alignment_pattern_search</STRONG> (Thumb, 1096 bytes, Stack size 392 bytes, qrdec.o(i.qr_alignment_pattern_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = qr_alignment_pattern_search &rArr; qr_finder_locate_crossing
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_cell_fproject
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hamming_dist
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_locate_crossing
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_alignment_pattern_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[69]"></a>qr_cmp_edge_pt</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, qrdec.o(i.qr_cmp_edge_pt))
<BR>[Address Reference Count : 2]<UL><LI> qrdec.o(i.qr_finder_edge_pts_aff_classify)
<LI> qrdec.o(i.qr_finder_edge_pts_hom_classify)
</UL>
<P><STRONG><a name="[158]"></a>qr_code_data_clear</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, qrdec.o(i.qr_code_data_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = qr_code_data_clear &rArr; atk_qr_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_list_clear
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
</UL>

<P><STRONG><a name="[159]"></a>qr_code_data_parse</STRONG> (Thumb, 932 bytes, Stack size 56 bytes, qrdec.o(i.qr_code_data_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = qr_code_data_parse &rArr; atk_qr_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_realloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_pack_buf_read
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_pack_buf_avail
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
</UL>

<P><STRONG><a name="[15c]"></a>qr_code_decode</STRONG> (Thumb, 462 bytes, Stack size 184 bytes, qrdec.o(i.qr_code_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = qr_code_decode &rArr; rs_correct &rArr; rs_modified_berlekamp_massey &rArr; atk_qr_memcpy &rArr; mymemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_correct
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_sample
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_samples_unpack
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_parse
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_clear
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_try_configuration
</UL>

<P><STRONG><a name="[161]"></a>qr_data_mask_fill</STRONG> (Thumb, 524 bytes, Stack size 32 bytes, qrdec.o(i.qr_data_mask_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = qr_data_mask_fill &rArr; atk_qr_memset &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_sample
</UL>

<P><STRONG><a name="[6a]"></a>qr_finder_center_cmp</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, qrdec.o(i.qr_finder_center_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qr_finder_center_cmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qrdec.o(i.qr_finder_find_crossings)
</UL>
<P><STRONG><a name="[108]"></a>qr_finder_centers_locate</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, qrdec.o(i.qr_finder_centers_locate))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = qr_finder_centers_locate &rArr; qr_finder_find_crossings &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_find_crossings
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_cluster_lines
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
</UL>

<P><STRONG><a name="[162]"></a>qr_finder_cluster_lines</STRONG> (Thumb, 436 bytes, Stack size 80 bytes, qrdec.o(i.qr_finder_cluster_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = qr_finder_cluster_lines &rArr; atk_qr_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_centers_locate
</UL>

<P><STRONG><a name="[164]"></a>qr_finder_edge_pts_aff_classify</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, qrdec.o(i.qr_finder_edge_pts_aff_classify))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = qr_finder_edge_pts_aff_classify &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_point_translate
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_aff_unproject
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_try_configuration
</UL>

<P><STRONG><a name="[16a]"></a>qr_finder_edge_pts_fill</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, qrdec.o(i.qr_finder_edge_pts_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = qr_finder_edge_pts_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_find_crossings
</UL>

<P><STRONG><a name="[167]"></a>qr_finder_edge_pts_hom_classify</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, qrdec.o(i.qr_finder_edge_pts_hom_classify))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = qr_finder_edge_pts_hom_classify &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_point_translate
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_unproject
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_try_configuration
</UL>

<P><STRONG><a name="[184]"></a>qr_finder_estimate_module_size_and_version</STRONG> (Thumb, 358 bytes, Stack size 76 bytes, qrdec.o(i.qr_finder_estimate_module_size_and_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = qr_finder_estimate_module_size_and_version
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_try_configuration
</UL>

<P><STRONG><a name="[163]"></a>qr_finder_find_crossings</STRONG> (Thumb, 554 bytes, Stack size 112 bytes, qrdec.o(i.qr_finder_find_crossings))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = qr_finder_find_crossings &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_lines_are_crossing
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_edge_pts_fill
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_centers_locate
</UL>

<P><STRONG><a name="[16b]"></a>qr_finder_fmt_info_decode</STRONG> (Thumb, 766 bytes, Stack size 168 bytes, qrdec.o(i.qr_finder_fmt_info_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = qr_finder_fmt_info_decode &rArr; bch15_5_correct &rArr; bch15_5_calc_epos &rArr; bch15_5_calc_omega
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_correct
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_img_get_bit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fproject
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_try_configuration
</UL>

<P><STRONG><a name="[169]"></a>qr_finder_lines_are_crossing</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, qrdec.o(i.qr_finder_lines_are_crossing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qr_finder_lines_are_crossing
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_find_crossings
</UL>

<P><STRONG><a name="[157]"></a>qr_finder_locate_crossing</STRONG> (Thumb, 344 bytes, Stack size 100 bytes, qrdec.o(i.qr_finder_locate_crossing))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = qr_finder_locate_crossing
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_alignment_pattern_search
</UL>

<P><STRONG><a name="[17c]"></a>qr_finder_quick_crossing_check</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, qrdec.o(i.qr_finder_quick_crossing_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = qr_finder_quick_crossing_check
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[16d]"></a>qr_finder_ransac</STRONG> (Thumb, 404 bytes, Stack size 96 bytes, qrdec.o(i.qr_finder_ransac))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = qr_finder_ransac &rArr; isaac_next_uint &rArr; isaac_next_uint32 &rArr; isaac_update
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_isqrt
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_next_uint
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_point_translate
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_point_distance2
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_point_ccw
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_aff_unproject
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[170]"></a>qr_finder_version_decode</STRONG> (Thumb, 352 bytes, Stack size 112 bytes, qrdec.o(i.qr_finder_version_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = qr_finder_version_decode &rArr; qr_img_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_img_get_bit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fproject
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hamming_dist
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_try_configuration
</UL>

<P><STRONG><a name="[156]"></a>qr_hamming_dist</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, qrdec.o(i.qr_hamming_dist))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_version_decode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_alignment_pattern_search
</UL>

<P><STRONG><a name="[155]"></a>qr_hom_cell_fproject</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, qrdec.o(i.qr_hom_cell_fproject))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qr_hom_cell_fproject
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_sample
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_cell_project
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_alignment_pattern_search
</UL>

<P><STRONG><a name="[174]"></a>qr_hom_cell_init</STRONG> (Thumb, 2060 bytes, Stack size 200 bytes, qrdec.o(i.qr_hom_cell_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = qr_hom_cell_init
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_ilog
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[176]"></a>qr_hom_cell_project</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, qrdec.o(i.qr_hom_cell_project))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = qr_hom_cell_project &rArr; qr_hom_cell_fproject
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_cell_fproject
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
</UL>

<P><STRONG><a name="[177]"></a>qr_hom_fit</STRONG> (Thumb, 2790 bytes, Stack size 288 bytes, qrdec.o(i.qr_hom_fit))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = qr_hom_fit &rArr; qr_alignment_pattern_search &rArr; qr_finder_locate_crossing
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_realloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memcpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_ilog
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_points
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_pair
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_edge
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_eval
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_cell_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_ransac
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_quick_crossing_check
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_locate_crossing
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_alignment_pattern_search
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_aff_unproject
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_aff_project
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_aff_line_step
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_try_configuration
</UL>

<P><STRONG><a name="[16c]"></a>qr_hom_fproject</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, qrdec.o(i.qr_hom_fproject))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qr_hom_fproject
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_version_decode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_fmt_info_decode
</UL>

<P><STRONG><a name="[17f]"></a>qr_hom_init</STRONG> (Thumb, 1924 bytes, Stack size 168 bytes, qrdec.o(i.qr_hom_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = qr_hom_init
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_ilog
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[168]"></a>qr_hom_unproject</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, qrdec.o(i.qr_hom_unproject))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = qr_hom_unproject
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_try_configuration
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_edge_pts_hom_classify
</UL>

<P><STRONG><a name="[153]"></a>qr_img_get_bit</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, qrdec.o(i.qr_img_get_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = qr_img_get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_sample
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_version_decode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_fmt_info_decode
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_alignment_pattern_fetch
</UL>

<P><STRONG><a name="[179]"></a>qr_line_eval</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, qrdec.o(i.qr_line_eval))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_orient
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[181]"></a>qr_line_fit</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, qrdec.o(i.qr_line_fit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = qr_line_fit &rArr; qr_ihypot
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_ilog
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_ihypot
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_points
</UL>

<P><STRONG><a name="[17a]"></a>qr_line_fit_finder_edge</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, qrdec.o(i.qr_line_fit_finder_edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = qr_line_fit_finder_edge &rArr; qr_line_fit_points &rArr; qr_line_fit &rArr; qr_ihypot
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_orient
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_points
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[178]"></a>qr_line_fit_finder_pair</STRONG> (Thumb, 300 bytes, Stack size 104 bytes, qrdec.o(i.qr_line_fit_finder_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = qr_line_fit_finder_pair &rArr; qr_line_fit_points &rArr; qr_line_fit &rArr; qr_ihypot
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_orient
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_points
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_aff_project
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[17b]"></a>qr_line_fit_points</STRONG> (Thumb, 592 bytes, Stack size 64 bytes, qrdec.o(i.qr_line_fit_points))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = qr_line_fit_points &rArr; qr_line_fit &rArr; qr_ihypot
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_ilog
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_pair
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_edge
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[182]"></a>qr_line_orient</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, qrdec.o(i.qr_line_orient))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qr_line_orient
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_eval
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_pair
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_edge
</UL>

<P><STRONG><a name="[15b]"></a>qr_pack_buf_avail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, qrdec.o(i.qr_pack_buf_avail))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_parse
</UL>

<P><STRONG><a name="[15a]"></a>qr_pack_buf_read</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, qrdec.o(i.qr_pack_buf_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = qr_pack_buf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_parse
</UL>

<P><STRONG><a name="[14f]"></a>qr_point_ccw</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, qrdec.o(i.qr_point_ccw))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = qr_point_ccw
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_try_configuration
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_ransac
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_aff_init
</UL>

<P><STRONG><a name="[16e]"></a>qr_point_distance2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, qrdec.o(i.qr_point_distance2))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_try_configuration
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_ransac
</UL>

<P><STRONG><a name="[166]"></a>qr_point_translate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, qrdec.o(i.qr_point_translate))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_ransac
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_edge_pts_hom_classify
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_edge_pts_aff_classify
</UL>

<P><STRONG><a name="[183]"></a>qr_reader_try_configuration</STRONG> (Thumb, 760 bytes, Stack size 480 bytes, qrdec.o(i.qr_reader_try_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112<LI>Call Chain = qr_reader_try_configuration &rArr; qr_code_decode &rArr; rs_correct &rArr; rs_modified_berlekamp_massey &rArr; atk_qr_memcpy &rArr; mymemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_ilog
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_point_distance2
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_point_ccw
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_unproject
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_version_decode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_fmt_info_decode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_estimate_module_size_and_version
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_edge_pts_hom_classify
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_edge_pts_aff_classify
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_aff_unproject
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_aff_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
</UL>

<P><STRONG><a name="[15f]"></a>qr_samples_unpack</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, qrdec.o(i.qr_samples_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = qr_samples_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
</UL>

<P><STRONG><a name="[185]"></a>qr_sampling_grid_fp_mask_rect</STRONG> (Thumb, 84 bytes, Stack size 36 bytes, qrdec.o(i.qr_sampling_grid_fp_mask_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = qr_sampling_grid_fp_mask_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
</UL>

<P><STRONG><a name="[15d]"></a>qr_sampling_grid_init</STRONG> (Thumb, 1824 bytes, Stack size 288 bytes, qrdec.o(i.qr_sampling_grid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = qr_sampling_grid_init &rArr; qr_alignment_pattern_search &rArr; qr_finder_locate_crossing
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memcpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_fp_mask_rect
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_cell_project
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_cell_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_alignment_pattern_search
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
</UL>

<P><STRONG><a name="[15e]"></a>qr_sampling_grid_sample</STRONG> (Thumb, 340 bytes, Stack size 144 bytes, qrdec.o(i.qr_sampling_grid_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = qr_sampling_grid_sample &rArr; qr_data_mask_fill &rArr; atk_qr_memset &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_img_get_bit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_cell_fproject
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_data_mask_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
</UL>

<P><STRONG><a name="[136]"></a>code39_decode1</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, code39.o(i.code39_decode1))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code39_decode9
</UL>

<P><STRONG><a name="[e8]"></a>code39_decode9</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, code39.o(i.code39_decode9))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = code39_decode9
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_width
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code39_decode1
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code39
</UL>

<P><STRONG><a name="[e9]"></a>code39_postprocess</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, code39.o(i.code39_postprocess))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = code39_postprocess &rArr; atk_qr_memset &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code39
</UL>

<P><STRONG><a name="[e7]"></a>get_width</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, code39.o(i.get_width))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code39
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code39_decode9
</UL>

<P><STRONG><a name="[12b]"></a>aux_end</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ean.o(i.aux_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aux_end
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_width
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_e
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_pass
</UL>

<P><STRONG><a name="[12d]"></a>aux_start</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ean.o(i.aux_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aux_start
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_width
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_e
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_pass
</UL>

<P><STRONG><a name="[137]"></a>decode4</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, ean.o(i.decode4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode4
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_width
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_e
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_pass
</UL>

<P><STRONG><a name="[12c]"></a>decode_e</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ean.o(i.decode_e))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_start
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_end
</UL>

<P><STRONG><a name="[ed]"></a>decode_pass</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, ean.o(i.decode_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = decode_pass &rArr; ean_part_end7
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ean_part_end7
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_start
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_end
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_ean
</UL>

<P><STRONG><a name="[13f]"></a>ean_expand_upce</STRONG> (Thumb, 180 bytes, Stack size 12 bytes, ean.o(i.ean_expand_upce))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ean_expand_upce
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integrate_partial
</UL>

<P><STRONG><a name="[13a]"></a>ean_part_end7</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, ean.o(i.ean_part_end7))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ean_part_end7
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_pass
</UL>

<P><STRONG><a name="[140]"></a>ean_verify_checksum</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, ean.o(i.ean_verify_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ean_verify_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integrate_partial
</UL>

<P><STRONG><a name="[ec]"></a>get_width</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ean.o(i.get_width))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_ean
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_start
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_end
</UL>

<P><STRONG><a name="[ee]"></a>integrate_partial</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, ean.o(i.integrate_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = integrate_partial &rArr; ean_verify_checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ean_verify_checksum
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ean_expand_upce
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_ean
</UL>

<P><STRONG><a name="[ef]"></a>postprocess</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, ean.o(i.postprocess))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = postprocess &rArr; atk_qr_memset &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_ean
</UL>

<P><STRONG><a name="[13e]"></a>decode_e</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, i25.o(i.decode_e))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i25_decode_end
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i25_decode1
</UL>

<P><STRONG><a name="[f1]"></a>get_width</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i25.o(i.get_width))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_i25
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i25_decode_start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i25_decode_end
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i25_decode10
</UL>

<P><STRONG><a name="[13d]"></a>i25_decode1</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, i25.o(i.i25_decode1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i25_decode1
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_e
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i25_decode_start
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i25_decode10
</UL>

<P><STRONG><a name="[f4]"></a>i25_decode10</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, i25.o(i.i25_decode10))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i25_decode10 &rArr; i25_decode1
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i25_decode1
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_i25
</UL>

<P><STRONG><a name="[f3]"></a>i25_decode_end</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, i25.o(i.i25_decode_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = i25_decode_end &rArr; atk_qr_memset &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memset
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_width
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_e
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_i25
</UL>

<P><STRONG><a name="[f2]"></a>i25_decode_start</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, i25.o(i.i25_decode_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i25_decode_start &rArr; i25_decode1
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i25_decode1
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_i25
</UL>

<P><STRONG><a name="[12e]"></a>bch15_5_calc_epos</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, bch15_5.o(i.bch15_5_calc_epos))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bch15_5_calc_epos &rArr; bch15_5_calc_omega
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf16_hmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_calc_omega
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_correct
</UL>

<P><STRONG><a name="[12f]"></a>bch15_5_calc_omega</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bch15_5.o(i.bch15_5_calc_omega))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bch15_5_calc_omega
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf16_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_calc_epos
</UL>

<P><STRONG><a name="[133]"></a>bch15_5_calc_syndrome</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, bch15_5.o(i.bch15_5_calc_syndrome))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bch15_5_calc_syndrome
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_correct
</UL>

<P><STRONG><a name="[130]"></a>gf16_hmul</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bch15_5.o(i.gf16_hmul))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_calc_epos
</UL>

<P><STRONG><a name="[131]"></a>gf16_mul</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bch15_5.o(i.gf16_mul))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_calc_omega
</UL>

<P><STRONG><a name="[141]"></a>isaac_mix</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, isaac.o(i.isaac_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isaac_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_init
</UL>

<P><STRONG><a name="[142]"></a>isaac_update</STRONG> (Thumb, 454 bytes, Stack size 20 bytes, isaac.o(i.isaac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = isaac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_next_uint32
</UL>

<P><STRONG><a name="[18e]"></a>rs_cubic_solve</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, rs.o(i.rs_cubic_solve))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rs_cubic_solve &rArr; rs_quadratic_solve
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quadratic_solve
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gmul
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
</UL>

<P><STRONG><a name="[18c]"></a>rs_find_roots</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, rs.o(i.rs_find_roots))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rs_find_roots &rArr; rs_quartic_solve &rArr;  rs_quartic_solve (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_hgmul
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_correct
</UL>

<P><STRONG><a name="[18d]"></a>rs_gdiv</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rs.o(i.rs_gdiv))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_correct
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quadratic_solve
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_cubic_solve
</UL>

<P><STRONG><a name="[18f]"></a>rs_gmul</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rs.o(i.rs_gmul))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quadratic_solve
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_modified_berlekamp_massey
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_cubic_solve
</UL>

<P><STRONG><a name="[194]"></a>rs_gsqrt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rs.o(i.rs_gsqrt))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quadratic_solve
</UL>

<P><STRONG><a name="[18a]"></a>rs_hgmul</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rs.o(i.rs_hgmul))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_correct
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quadratic_solve
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_modified_berlekamp_massey
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_find_roots
</UL>

<P><STRONG><a name="[18b]"></a>rs_modified_berlekamp_massey</STRONG> (Thumb, 396 bytes, Stack size 320 bytes, rs.o(i.rs_modified_berlekamp_massey))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rs_modified_berlekamp_massey &rArr; atk_qr_memcpy &rArr; mymemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_qr_memcpy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_poly_zero
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_hgmul
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gmul
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_correct
</UL>

<P><STRONG><a name="[192]"></a>rs_poly_zero</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rs.o(i.rs_poly_zero))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_modified_berlekamp_massey
</UL>

<P><STRONG><a name="[190]"></a>rs_quadratic_solve</STRONG> (Thumb, 472 bytes, Stack size 48 bytes, rs.o(i.rs_quadratic_solve))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rs_quadratic_solve
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_hgmul
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gsqrt
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gmul
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_cubic_solve
</UL>

<P><STRONG><a name="[191]"></a>rs_quartic_solve</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, rs.o(i.rs_quartic_solve))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = rs_quartic_solve &rArr;  rs_quartic_solve (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quadratic_solve
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_hgmul
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gsqrt
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gmul
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gdiv
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_cubic_solve
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_find_roots
</UL>

<P><STRONG><a name="[91]"></a>_partition_sort</STRONG> (Thumb, 478 bytes, Stack size 296 bytes, qsortnoex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _partition_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>

<P><STRONG><a name="[65]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
